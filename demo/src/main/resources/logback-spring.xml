<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志爱默认文件的事例-->
        <!--根节点<configuration>包含的属性-->
        <!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
        <!--scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
        <!--debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <!--设置上下文名称<contextName>-->
    <!--每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。-->
    <contextName>logback</contextName>
    <!--设置变量<property> 通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。-->
    <property name="log.path" value="/home/wxq/logback.log" />
    <!--输出到控制台-->
    <!--appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。-->
        <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
         </filter>-->
        <!--<encoder>表示对日志进行编码：-->
        <!--%d{HH: mm:ss.SSS}——日志输出时间-->
        <!--%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用-->
        <!--%-5level——日志级别，并且使用5个字符靠左对齐-->
        <!--%logger{36}——日志输出者的名字-->
        <!--%msg——日志消息-->
        <!--%n——平台的换行符-->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--输出到文件, log.path 在上面进行了设置 ,RollingFileAppender用于切分文件日志：-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--定义文件的切分方式,把每一天的日志归档到一个文件中-->
            <fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--表示只保留最近30天的日志，以防止日志填满整个磁盘空间-->
            <maxHistory>30</maxHistory>
            <!--指定日志文件的上限大小-->
            <totalSizeCap>30MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
<!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。-->
    <!--level:用来设置打印级别，大小写无关,默认debug 可以设置的值有-->
    <!--TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF-->
    <root level="info">
        <!--可以包含零个或多个元素，标识这个appender将会添加到这个loger-->
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </root>
    <!--<loger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
    <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。-->
    <!--除了上面的,还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。-->
    <!--addtivity:是否向上级loger传递打印信息。默认是true-->
    <!-- logback为java中的包 -->
    <logger name="com.test.demo.controller"/>
    <!--logback.LogbackDemo：类的全路径 -->
    <logger name="com.test.demo.MyAdapter" level="WARN" additivity="false">
        <appender-ref ref="console"/>
    </logger>

    <!--可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：
java -jar xxx.jar –spring.profiles.active=prod-->
    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="test,dev">
        <logger name="com.dudu.controller" level="info" />
    </springProfile>
    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="com.dudu.controller" level="ERROR" />
    </springProfile>
</configuration>
